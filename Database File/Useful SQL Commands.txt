++----------------------Table Definitions----------------------++

CREATE TABLE Athletes (
bib INTEGER,
name STRING,
team STRING,
gender char,
sl_points INTEGER DEFAULT 0,
gs_points INTEGER DEFAULT 0,
sg_points INTEGER DEFAULT 0,
total_points INTEGER GENERATED ALWAYS AS(sl_points + gs_points + sg_points) STORED,
season string references seasons(season)
);

CREATE TABLE meet_team_results (
team    string,
sl_1_bib        integer,
sl_2_bib        integer,
sl_3_bib        integer,
sl_4_bib        integer,
gs_1_bib        integer,
gs_2_bib        integer,
gs_3_bib        integer,
gs_4_bib        integer,
sg_1_bib        integer,
sg_2_bib        integer,
sg_3_bib        integer,
sg_4_bib        integer,
total_points    integer,
season  string references seasons (season),
meet_id integer references meet_data(meet_id)
);
##Not currently needed
#CREATE TABLE season (
#bib     INTEGER REFERENCES Athletes (bib),
#sl_points INTEGER,
#gs_points INTEGER,
#sg_points INTEGER,
#total_points INT GENERATED ALWAYS AS(sl_points + gs_points + sg_points) STORED,
#season STRING REFERENCES seasons (season)
#);

CREATE TABLE seasons (
season  STRING PRIMARY KEY
);

CREATE TABLE meets (
    bib          INTEGER REFERENCES Athletes (bib),
    sl_time      DOUBLE,
    gs_time      DOUBLE,
    sg_time      DOUBLE,
    sl_points    INTEGER,
    gs_points    INTEGER,
    sg_points    INTEGER,
    total_points INT GENERATED ALWAYS AS(sl_points + gs_points + sg_points) STORED,
    total_time   DOUBLE GENERATED ALWAYS AS(sl_time + gs_time + sg_time) STORED,
	season string references seasons (season),
	meet_id references meet_data (meet_id)
);

CREATE TABLE meet_data(
meet_id INTEGER,
date DATE,
location STRING,
season STRING REFERENCES seasons(season)
);

++----------------------Insert Commands----------------------++

INSERT INTO Athletes('bib', 'name', 'team', 'gender', 'season')
VALUES (251, 'Matt Kouba', 'Ashwabay', 'M', '2018-19');

##this will work when the conflict column is unique
insert into meets(bib, gs_time, gs_points, season, meet_id)
values(906, 27.9, 1, '2019-20', 1)
ON CONFLICT(bib)
DO UPDATE SET gs_time=27.9, gs_points=1;

## to either update an existing record or if it does not exist it will add a new record of the athlete
update meets set sl_time=27.1, sl_points=1 where bib=251 and meet_id=1 and season='2019-20';
insert or ignore into meets(bib, sl_time, sl_points, season, meet_id) values(251, 27.1, 1, '2019-20', 1);

##to get data from the meets table based on gender
select * from meets where bib in (select bib from Athletes where gender='M') and meet_id=1 and season='2019-20';

## to get certian data from a table, will be useful when getting results for a specific meet.
## it gets the bib, name, total points where the meet id is 1, the season is 2019-20 and the gender is Female
SELECT meets.bib, Athletes.name, meets.total_points FROM meets INNER JOIN Athletes ON Athletes.bib=meets.bib WHERE meets.bib IN (Select bib FROM Athletes WHERE gender='F') AND meet_id=1 AND season='2019-20' ORDER BY total_points;

##The above command will return data in the following format
[bib from meets]|[name from Athletes]|[total_points from meets]

##update the running totals for the discipline column 
##look into if I can make it dynamically take the points from every meet so something like meet_id=(SELECT meet_id from meet_data) or something like that;
update Athletes 
set sl_points=(SELECT sl_points from meets where meets.bib = Athletes.bib and meet_id=1 and season='2019-20')+Athletes.sl_points,
gs_points=(SELECT gs_points from meets where meets.bib = Athletes.bib and meet_id=1 and season='2019-20')+Athletes.gs_points,
sg_points=(SELECT sg_points from meets where meets.bib = Athletes.bib and meet_id=1 and season='2019-20')+Athletes.sg_points
where season='2019-20';

##this is an update command to get the sum of ALL of the meet points from a given season for the bib 251
update Athletes set sl_points=(SELECT sum(sl_points) from meets where meets.bib = Athletes.bib and season='2019-20') where bib=251;

##This is the command to use to update the point totals for a given number of meets.
##This query updates the total points of sl_points, gs_points, and sg_points by getting the sum of the given number of meets in order of least to greatest in a given season
UPDATE Athletes
SET sl_points=(
			   SELECT SUM(sl_points) OVER( 
										  ORDER BY sl_points 
										  ROWS BETWEEN CURRENT ROW AND [1,2,3,4,...] FOLLOWING
										  )
				FROM meets 
				WHERE meets.bib=Athletes.bib
				AND season=['2019-20, '2020-21', ...]
				LIMIT 1
				),
SET gs_points=(
			   SELECT SUM(gs_points) OVER( 
										  ORDER BY gs_points 
										  ROWS BETWEEN CURRENT ROW AND [1,2,3,4,...] FOLLOWING
										  )
				FROM meets 
				WHERE meets.bib=Athletes.bib
				AND season=['2019-20, '2020-21', ...]
				LIMIT 1
				)
SET sg_points=(
			   SELECT SUM(sg_points) OVER( 
										  ORDER BY sg_points 
										  ROWS BETWEEN CURRENT ROW AND [1,2,3,4,...] FOLLOWING
										  )
				FROM meets 
				WHERE meets.bib=Athletes.bib
				AND season=['2019-20, '2020-21', ...]
				LIMIT 1
				)
WHERE season=['2019-20, '2020-21', ...];