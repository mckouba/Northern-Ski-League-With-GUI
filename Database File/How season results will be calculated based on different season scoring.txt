--step 1: get the dns results for the people that missed meets
--there will be at least two of these depending on the dns scoring wants
--both of these will exist in the database already.  They only thing the program will change is the update command

--This will score dns as everyone the same gender at the meet plus one
CREATE VIEW dns_results_1
as select bib,
       88888.0 as sl_time,
       88888.0 as gs_time, 
       88888.0 as sg_time, 
       (CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1 AS sl_points, 
       (CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1 AS gs_points, 
       (CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1 AS sg_points,
       ((CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1) * 3 AS total_points,
       266664 as total_time,
       Athletes.season,
       meet_data.meet_id
from Athletes 
inner join meet_data using(season) 
where meet_data.meet_id not in (select meet_id from meets where meets.bib=Athletes.bib and meets.season=Athletes.season);

--This will score as everyone the same gender at the meet plus one TIMES TWO
CREATE VIEW dns_results_2
as select bib,
       88888.0 as sl_time,
       88888.0 as gs_time, 
       88888.0 as sg_time, 
       ((CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1) * 2 AS sl_points, 
       ((CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1) * 2 AS gs_points, 
       ((CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1) * 2 AS sg_points,
       ((CASE gender WHEN 'M' THEN meet_data.num_athletes_m ELSE meet_data.num_athletes_f END) + 1) * 6 AS total_points,
       266664 as total_time,
       Athletes.season,
       meet_data.meet_id
from Athletes 
inner join meet_data using(season) 
where meet_data.meet_id not in (select meet_id from meets where meets.bib=Athletes.bib and meets.season=Athletes.season);

--step 2: Create a view that combines the data from the DNS table and the actual meet results table

--Will generate view based on the scoring of _1 as described above
CREATE VIEW meet_results_view_1
AS SELECT Athletes.gender, 
       Athletes.bib, 
       Athletes.name,
       Athletes.team, 
       Athletes.season, 
       meets.sl_time,
       meets.sl_points, 
       meets.gs_time, 
       meets.gs_points, 
       meets.sg_time, 
       meets.sg_points,
       meets.total_points,
       meets.total_time,  
       meets.meet_id 
FROM Athletes 
INNER JOIN meets ON meets.bib=Athletes.bib
UNION
SELECT Athletes.gender, 
       Athletes.bib, 
       Athletes.name,
       Athletes.team, 
       Athletes.season, 
       dns_results_1.sl_time,
       dns_results_1.sl_points, 
       dns_results_1.gs_time, 
       dns_results_1.gs_points, 
       dns_results_1.sg_time, 
       dns_results_1.sg_points,
       dns_results_1.total_points,
       dns_results_1.total_time,  
       dns_results_1.meet_id
FROM dns_results_1
INNER JOIN Athletes USING(bib)
ORDER BY Athletes.bib;


--Will generate view based on the scoring of _2 as described above
CREATE VIEW meet_results_view_2
AS SELECT Athletes.gender, 
       Athletes.bib, 
       Athletes.name,
       Athletes.team, 
       Athletes.season, 
       meets.sl_time,
       meets.sl_points, 
       meets.gs_time, 
       meets.gs_points, 
       meets.sg_time, 
       meets.sg_points,
       meets.total_points,
       meets.total_time,  
       meets.meet_id 
FROM Athletes 
INNER JOIN meets ON meets.bib=Athletes.bib
UNION
SELECT Athletes.gender, 
       Athletes.bib, 
       Athletes.name,
       Athletes.team, 
       Athletes.season, 
       dns_results_2.sl_time,
       dns_results_2.sl_points, 
       dns_results_2.gs_time, 
       dns_results_2.gs_points, 
       dns_results_2.sg_time, 
       dns_results_2.sg_points,
       dns_results_2.total_points,
       dns_results_2.total_time,  
       dns_results_2.meet_id
FROM dns_results_2
INNER JOIN Athletes USING(bib)
ORDER BY Athletes.bib;

--step 3: Update the Athletes table with the information that is contained in the meet_results_view view based on the number of meets to be scored
--which will be determined by the program
UPDATE Athletes
SET sl_points=(
			   SELECT SUM(sl_points) OVER( 
										  ORDER BY sl_points 
										  ROWS BETWEEN CURRENT ROW AND 4 FOLLOWING
										  )
				FROM meet_results_view_[1,2] 
				WHERE meet_results_view_[1,2].bib=Athletes.bib
				AND meet_results_view_[1,2].season=Athletes.season
				LIMIT 1
				),
gs_points=(
			   SELECT SUM(gs_points) OVER( 
										  ORDER BY gs_points 
										  ROWS BETWEEN CURRENT ROW AND 4 FOLLOWING
										  )
				FROM meet_results_view_[1,2] 
				WHERE meet_results_view_[1,2].bib=Athletes.bib
				AND meet_results_view_[1,2].season=Athletes.season
				LIMIT 1
				),
sg_points=(
			   SELECT SUM(sg_points) OVER( 
										  ORDER BY sg_points 
										  ROWS BETWEEN CURRENT ROW AND 4 FOLLOWING
										  )
				FROM meet_results_view_[1,2] 
				WHERE meet_results_view_[1,2].bib=Athletes.bib
				AND meet_results_view_[1,2].season=Athletes.season
				LIMIT 1
				)
WHERE season='2019-20';